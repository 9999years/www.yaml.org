<?xml version="1.0"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
         "file:///usr/local/share/xml/docbook/4.2/docbookx.dtd"
[]>

<article status="draft">
  <articleinfo>
    <title>
      Value Key Language-Independent Type for <trademark>YAML</trademark>
    </title>

    <subtitle>
      Working Draft 200?-??-??
    </subtitle>

    <authorgroup>
      <author>
        <firstname>Oren</firstname>
        <surname>Ben-Kiki</surname>
        <email>oren@ben-kiki.org</email>
      </author>

      <author>
        <firstname>Clark</firstname>
        <surname>Evans</surname>
        <email>cce+yaml@clarkevans.com</email>
      </author>

      <author>
        <firstname>Brian</firstname>
        <surname>Ingerson</surname>
        <email>ingy@ttul.org</email>
      </author>
    </authorgroup>

    <copyright>
      <year>2001-2004</year>
      <holder>Oren Ben-Kiki</holder>
      <holder>Clark Evans</holder>
      <holder>Brian Ingerson</holder>
    </copyright>

    <legalnotice>
      This document may be freely copied provided it is not modified.
    </legalnotice>

    <abstract>
      <title>Status</title>

      <para>
        This specification is a release candidate and reflects consensus
        reached by members of the yaml-core mailing list. Any questions
        regarding this draft should be raised on this list at <ulink
        url="http://lists.sourceforge.net/lists/listinfo/yaml-core"/>. With
        this release of the YAML specification, all further changes will be
        strictly limited to clarifications, or fixing bugs in productions. At
        this point, further enhancement or correction of logical flaws will be
        put off to the next version (1.1) of the YAML specification.
      </para>
    </abstract>
  </articleinfo>

  <part>
    <variablelist>
      <varlistentry>
        <term>URI:</term>
        <listitem><userinput>tag:yaml.org,2002:value</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Shorthand:</term>
        <listitem><userinput>!value</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Kind:</term>
        <listitem>Scalar.</listitem>
      </varlistentry>

      <varlistentry>
        <term>Canonical:</term>
        <listitem>
          N/A (single format).
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Regexp:</term>
        <listitem>
          <userinput>=</userinput>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Definition:</term>
        <listitem>
          <para>
            Specify the default value of a mapping.
          </para>

          <para>
            The <quote><userinput>=</userinput></quote> key is used to denote
            the "default value" of a mapping. In some cases, it is useful to
            evolve a schema so that a scalar value is replaced with a mapping.
            A processor may present a "scalar value" method that provides the
            value directly if the node is a scalar, or returns the value of
            this key if the node is a mapping. If applications only access the
            scalar value through this interface, then the schema may freely
            grow over time replacing scalar values with richer data constructs
            without breaking older processing systems.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <example>
<screen>
---     # Old schema
link with:
  - library1.dll
  - library2.dll
---     # New schema
link with:
  - = : library1.dll
    version: 1.2
  - = : library2.dll
    version: 2.3
</screen>
    </example>
  </part>
</article>
