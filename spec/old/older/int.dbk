<?xml version="1.0"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
         "file:///usr/local/share/xml/docbook/4.2/docbookx.dtd"
[]>

<article status="draft">
  <articleinfo>
    <title>
      Integer Language-Independent Type for <trademark>YAML</trademark>
    </title>

    <subtitle>
      Working Draft 200?-??-??
    </subtitle>

    <authorgroup>
      <author>
        <firstname>Oren</firstname>
        <surname>Ben-Kiki</surname>
        <email>oren@ben-kiki.org</email>
      </author>

      <author>
        <firstname>Clark</firstname>
        <surname>Evans</surname>
        <email>cce+yaml@clarkevans.com</email>
      </author>

      <author>
        <firstname>Brian</firstname>
        <surname>Ingerson</surname>
        <email>ingy@ttul.org</email>
      </author>
    </authorgroup>

    <copyright>
      <year>2001-2004</year>
      <holder>Oren Ben-Kiki</holder>
      <holder>Clark Evans</holder>
      <holder>Brian Ingerson</holder>
    </copyright>

    <legalnotice>
      This document may be freely copied provided it is not modified.
    </legalnotice>

    <abstract>
      <title>Status</title>

      <para>
        This specification is a release candidate and reflects consensus
        reached by members of the yaml-core mailing list. Any questions
        regarding this draft should be raised on this list at <ulink
        url="http://lists.sourceforge.net/lists/listinfo/yaml-core"/>. With
        this release of the YAML specification, all further changes will be
        strictly limited to clarifications, or fixing bugs in productions. At
        this point, further enhancement or correction of logical flaws will be
        put off to the next version (1.1) of the YAML specification.
      </para>
    </abstract>
  </articleinfo>

  <part>
    <variablelist>
      <varlistentry>
        <term>URI:</term>
        <listitem><userinput>tag:yaml.org,2002:int</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Shorthand:</term>
        <listitem><userinput>!int</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Kind:</term>
        <listitem>Scalar.</listitem>
      </varlistentry>

      <varlistentry>
        <term>Definition:</term>
        <listitem>
          <para>
            Mathematical integers.
          </para>

          <para>
            Integers represent arbitrarily sized finite mathematical integers.
            Integers can be formatted using the familiar decimal notation, or
            may have a leading <quote><userinput>0x</userinput></quote> to
            signal hexadecimal, or a leading
            <quote><userinput>0</userinput></quote> to signal an octal base.
            Using <quote><userinput>:</userinput></quote> allows expressing
            integers in base 60, which is convenient for time and angle values.
            Any <quote><userinput>,</userinput></quote> characters in the
            number are ignored, allowing a readable representation of large
            values.
          </para>

          <para>
            Scalars of this type should be represented by a native integer data
            type, if possible. However, there are cases where an integer
            provided may overflow the native type's storage capability. In this
            case, the processor should find some manner to round-trip the
            integer, perhaps using a string based representation. In general,
            integers representable using 32 binary digits should safely
            round-trip through most systems.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Canonical Format:</term>
        <listitem>
          <userinput>0|-?[1-9]&amp;[0-9]* <lineannotation>(base
          10)</lineannotation></userinput>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Resolution and Validation:</term>
        <listitem>
          <para>
            Valid values must match the followig regular expression,
            which may also be used for implicit tag resolution:
          </para>
<screen>
 [-+]?0[0-8,]+ <lineannotation>(base 8)</lineannotation>
|[-+]?(0|[1-9])[0-9,]*) <lineannotation>(base 10)</lineannotation>
|[-+]?0x[0-9a-fA-F,]+ <lineannotation>(base 16)</lineannotation>
|[-+]?[1-9][0-9,]*(:[0-5]?[0-9])+ <lineannotation>(base 60)</lineannotation>
</screen>
        </listitem>
      </varlistentry>
    </variablelist>

    <example>
<screen>
canonical: 685230
decimal: +685,230
octal: 02472256
hexadecimal: 0x0A,74,AE
sexagesimal: 190:20:30
</screen>
    </example>
  </part>
</article>
