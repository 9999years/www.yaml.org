<?xml version="1.0"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
         "file:///usr/local/share/xml/docbook/4.2/docbookx.dtd"
[]>

<article status="draft">
  <articleinfo>
    <title>
      Set Language-Independent Type for <trademark>YAML</trademark>
    </title>

    <subtitle>
      Working Draft 200?-??-??
    </subtitle>

    <authorgroup>
      <author>
        <firstname>Oren</firstname>
        <surname>Ben-Kiki</surname>
        <email>oren@ben-kiki.org</email>
      </author>

      <author>
        <firstname>Clark</firstname>
        <surname>Evans</surname>
        <email>cce+yaml@clarkevans.com</email>
      </author>

      <author>
        <firstname>Brian</firstname>
        <surname>Ingerson</surname>
        <email>ingy@ttul.org</email>
      </author>
    </authorgroup>

    <copyright>
      <year>2001-2004</year>
      <holder>Oren Ben-Kiki</holder>
      <holder>Clark Evans</holder>
      <holder>Brian Ingerson</holder>
    </copyright>

    <legalnotice>
      This document may be freely copied provided it is not modified.
    </legalnotice>

    <abstract>
      <title>Status</title>

      <para>
        This specification is a release candidate and reflects consensus
        reached by members of the yaml-core mailing list. Any questions
        regarding this draft should be raised on this list at <ulink
        url="http://lists.sourceforge.net/lists/listinfo/yaml-core"/>. With
        this release of the YAML specification, all further changes will be
        strictly limited to clarifications, or fixing bugs in productions. At
        this point, further enhancement or correction of logical flaws will be
        put off to the next version (1.1) of the YAML specification.
      </para>
    </abstract>
  </articleinfo>

  <part>
    <variablelist>
      <varlistentry>
        <term>URI:</term>
        <listitem><userinput>tag:yaml.org,2002:set</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Shorthand:</term>
        <listitem><userinput>!set</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Kind:</term>
        <listitem>Mapping.</listitem>
      </varlistentry>

      <varlistentry>
        <term>Definition:</term>
        <listitem>
          <para>
            Unordered set of non-equal values.
          </para>

          <para>
            A set is an unordered collection of nodes such that no two nodes
            are equal. While sets are a fundamental mathematical type, YAML
            only supports them as the domains of a mapping. Hence the YAML
            syntax for a set is a mapping with all-null values.
          </para>

          <para>
            Most programming languages do not have a built-in native data type
            for supporting sets. Such data types are usually provided by
            libraries. If no such data type is available, an application may
            resort to loading a <quote><userinput>!set</userinput></quote> into
            a native hash table where all values are null.
          </para>

          <para>
            The <quote><userinput>!set</userinput></quote> tag may be given
            explicitly, or the application may choose to implicitly type
            mappings with all-null values to sets. In this case, an explicit
            <quote><userinput>!map</userinput></quote> transfer must be given
            to mappings that have all-null values but do not represent sets.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <example>
<screen>
# Explicitly typed set.
baseball players: !set
  ? Mark McGwire
  ? Sammy Sosa
  ? Ken Griffey
# Flow style
baseball teams: !set { Boston Red Sox, Detroit Tigers, New York Yankees }
</screen>
    </example>
  </part>
</article>
