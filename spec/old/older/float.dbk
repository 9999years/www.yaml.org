<?xml version="1.0"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
         "file:///usr/local/share/xml/docbook/4.2/docbookx.dtd"
[]>

<article status="draft">
  <articleinfo>
    <title>
      Floating-Point Language-Independent Type for <trademark>YAML</trademark>
    </title>

    <subtitle>
      Working Draft 200?-??-??
    </subtitle>

    <authorgroup>
      <author>
        <firstname>Oren</firstname>
        <surname>Ben-Kiki</surname>
        <email>oren@ben-kiki.org</email>
      </author>

      <author>
        <firstname>Clark</firstname>
        <surname>Evans</surname>
        <email>cce+yaml@clarkevans.com</email>
      </author>

      <author>
        <firstname>Brian</firstname>
        <surname>Ingerson</surname>
        <email>ingy@ttul.org</email>
      </author>
    </authorgroup>

    <copyright>
      <year>2001-2004</year>
      <holder>Oren Ben-Kiki</holder>
      <holder>Clark Evans</holder>
      <holder>Brian Ingerson</holder>
    </copyright>

    <legalnotice>
      This document may be freely copied provided it is not modified.
    </legalnotice>

    <abstract>
      <title>Status</title>

      <para>
        This specification is a release candidate and reflects consensus
        reached by members of the yaml-core mailing list. Any questions
        regarding this draft should be raised on this list at <ulink
        url="http://lists.sourceforge.net/lists/listinfo/yaml-core"/>. With
        this release of the YAML specification, all further changes will be
        strictly limited to clarifications, or fixing bugs in productions. At
        this point, further enhancement or correction of logical flaws will be
        put off to the next version (1.1) of the YAML specification.
      </para>
    </abstract>
  </articleinfo>

  <part>
    <variablelist>
      <varlistentry>
        <term>URI:</term>
        <listitem><userinput>tag:yaml.org,2002:float</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Shorthand:</term>
        <listitem><userinput>!float</userinput></listitem>
      </varlistentry>

      <varlistentry>
        <term>Kind:</term>
        <listitem>Scalar.</listitem>
      </varlistentry>

      <varlistentry>
        <term>Canonical:</term>
        <listitem>
<screen>
 0
|[-]?0\.([0-9]*[1-9])?e[-+](0|[1-9][0-9]+) <lineannotation>(scientific)</lineannotation>
|-?\.inf <lineannotation>(infinity)</lineannotation>
|.nan <lineannotation>(not a number)</lineannotation>
</screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Regexp:</term>
        <listitem>
<screen>
 [-+]?([0-9][0-9,]*)?\.[0-9.]*([eE][-+][0-9]+)? <lineannotation>(base 10)</lineannotation>
|[-+]?[0-9][0-9,]*(:[0-5]?[0-9])+\.[0-9,]* <lineannotation>(base 60)</lineannotation>
|[-+]?\.(inf|Inf|INF) <lineannotation>(infinity)</lineannotation>
|\.(nan|NaN|NAN) <lineannotation>(not a number)</lineannotation>
</screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Definition:</term>
        <listitem>
          <para>
            Floating-point approximation to real numbers.
          </para>

          <para>
            Floating-point numbers are approximations to real numbers,
            including three special values (positive and negative infinity and
            <quote>not a number</quote>). Using
            <quote><userinput>:</userinput></quote> allows expressing the
            integer part in base 60, which is convenient for time and angle
            values. Any <quote><userinput>,</userinput></quote> characters in
            the number are ignored, allowing a readable representation of large
            values.
          </para>

          <para>
            This should be loaded to some native float data type. The processor
            may choose from a range of such native data types according to the
            size and accuracy of the floating-point value. Note that not all
            floating-point values can be represented exactly when stored in any
            native float type, and hence a float value may change by <quote>a
            small amount</quote> when round-tripped through a native type. The
            valid range and accuracy depends on the implementation, though 32
            bit IEEE floats should be safe.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <example>
<screen>
canonical: 6.8523015e+5
exponentioal: 685.230,15e+03
fixed: 685,230.15
sexagesimal: 190:20:30.15
negative infinity: -.inf
not a number: .NaN
</screen>
    </example>
  </part>
</article>
